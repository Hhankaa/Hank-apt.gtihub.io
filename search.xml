<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SecretWorld</title>
    <url>/2021/06/20/SecretWorld/</url>
    <content><![CDATA[<p>#你为什么来到这里？<br>– 关于这里的一切，这里是我的秘密基地；<br>#今天还是觉得有点枯燥<br>– 为什么没有一些值得我做的事情？还不如在学校学习东西。</p>
]]></content>
  </entry>
  <entry>
    <title>1.动态规划</title>
    <url>/2021/06/28/1.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p><strong>动态规划，包含3个重要的概念： 1. 最优子结构 2. 边界3. 状态方程</strong></p>
<p>思考问题： 如何优化动态规划问题？如果dp[i] 只和dp[i-1]有关，那么可以使用【滚动变量】的方式将代码进行优化。</p>
<ul>
<li>当前状态至于前两个状态有关，只需要想办法存储前两个状态就可以了。</li>
</ul>
<h2 id="1-53-最大子序和"><a href="#1-53-最大子序和" class="headerlink" title="1. 53. 最大子序和"></a>1. <a href="https://leetcode-cn.com/problems/maximum-subarray/">53. 最大子序和</a></h2><ul>
<li><p><code>dp[i]</code>：表示以 <code>nums[i]</code> **结尾的 <strong>连续</strong> 子数组的最大和。</p>
</li>
<li><p>状态转移方程<br>$$<br>dp[i]=\left{<br>\begin{aligned}<br>dp[i-1]+nums[i] &amp; &amp; dp[i-1]&gt;=0\<br>nums[i] &amp; &amp; dp&lt; 0<br>\end{aligned}<br>\right.<br>$$</p>
<p>$$<br>dp[i] = max(dp[i-1]+nums[i],nums[i])<br>$$</p>
</li>
<li><p>思考初始问题： dp[0 ] = nums[0].</p>
</li>
</ul>
<pre><code class="python">def maxSubArray(nums):
    if len(nums) == 0: return 0
    dp = [0 for _ in range(len(nums))]
    dp[0] = nums[0]
    for i in range(len(nums)):
        dp[i] = max(dp[i-1]+nums[i],nums[i])
    return max(dp)
def maxSubArray(nums):
    if len(nums) == 0: return 0
    pre = nums[0]
    res = 0
    for i in range(len(nums)):
        pre = max(pre+nums[i],nums[i])
        res = max(res,pre)
    return res
</code></pre>
<h2 id="2-322-零钱兑换"><a href="#2-322-零钱兑换" class="headerlink" title="2. 322. 零钱兑换"></a>2. <a href="https://leetcode-cn.com/problems/coin-change/">322. 零钱兑换</a></h2><p>​    <strong>步骤：</strong></p>
<ol>
<li>确定base case </li>
<li>确定【状态】，也就是原问题和子问题中会变化的变量</li>
<li>确定【选择】，也就是导致【状态】产生变化的行为</li>
<li>明确dp函数/数组的定义</li>
</ol>
<img src="https://pic.leetcode-cn.com/2cdf411d73e7f4990c63c9ff69847c146311689ebc286d3eae715fa5c53483cf-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-03-08%2010.23.03.png" style="zoom:50%;" />

<h2 id="3-121-买卖股票的最佳时机"><a href="#3-121-买卖股票的最佳时机" class="headerlink" title="3. 121. 买卖股票的最佳时机"></a>3. <a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">121. 买卖股票的最佳时机</a></h2><p><strong>买一次，卖一次</strong>，max-min 就可以得到最大的利润，那就要得到这个<strong>最小值</strong>，遍历整个list，每次都与当前的最小值相减，得到当前的最大值即可。</p>
<pre><code class="Python">  def maxProfit(self, prices: List[int]) -&gt; int:
        n = len(prices)
        if n &lt; 0 : return 0
        dp = [0]*n
        minPrice = prices[0]

        for i in range(n):
            minPrice = min(prices[i],minPrice)
            dp[i] = max(dp[i-1],prices[i]-minPrice)
        return max(dp)
</code></pre>
<p>因为dp[i] 只和 dp[i-1]有关，所以可以进行状态压缩</p>
<pre><code class="Python">    def maxProfit(self, prices: List[int]) -&gt; int:
        n = len(prices)
        if n &lt; 0 : return 0
        minPrice = prices[0]
        maxProfit = 0
        for i in range(n):
            minPrice = min(prices[i],minPrice)
            maxProfit = max(maxProfit,prices[i]-minPrice)
        return maxProfit
</code></pre>
<h2 id="4-300-最长递增子序列"><a href="#4-300-最长递增子序列" class="headerlink" title="4. 300. 最长递增子序列"></a>4. <a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/">300. 最长递增子序列</a></h2><ul>
<li><p>定义一个dp[i] 表示，nums 中前面i个元素中最长递增子序列的长度，初始化长度为len(nums) ，初始值为1</p>
<img src = "https://pic.leetcode-cn.com/7ae911e51d39c7007ad8d548566abe40a84e5deb3cd682fd071080cd307f71f5-Picture1.png" style ="zoom:30%" /></li>
<li><p>$$<br>dp[i] = max(dp[i],dp[j]+1)<br>$$</p>
</li>
</ul>
<h2 id="5-70-爬楼梯"><a href="#5-70-爬楼梯" class="headerlink" title="5. 70. 爬楼梯"></a>5. <a href="https://leetcode-cn.com/problems/climbing-stairs/">70. 爬楼梯</a></h2><ul>
<li><p>这里要明确，因为爬楼梯只能爬1层和2层</p>
</li>
<li><p>所以我们爬n层，关注n-1层因为再爬一层就到了，关注n-2层因为再爬两层就到了</p>
</li>
<li><p>所以爬n层，<br>$$<br>dp[n] = dp[n-1]+dp[n-2]<br>$$</p>
</li>
<li><p>确定base case , dp[0] = dp[1] = 1</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>2.回溯算法</title>
    <url>/2021/07/09/2.%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95(DFS)/</url>
    <content><![CDATA[<h1 id="回溯（DFS深度优先算法）"><a href="#回溯（DFS深度优先算法）" class="headerlink" title="回溯（DFS深度优先算法）"></a>回溯（DFS深度优先算法）</h1><p>其实回溯算法其实就是我们常说的 DFS 算法，本质上就是一种暴力穷举算法。</p>
<p>废话不多说，直接上回溯算法框架。<strong>解决一个回溯问题，实际上就是一个决策树的遍历过程</strong>。你只需要思考 3 个问题：</p>
<p>1、路径：也就是已经做出的选择。</p>
<p>2、选择列表：也就是你当前可以做的选择。</p>
<p>3、结束条件：也就是到达决策树底层，无法再做选择的条件。</p>
<h2 id="一、全排列问题"><a href="#一、全排列问题" class="headerlink" title="一、全排列问题"></a>一、全排列问题</h2><img src="https://gblobscdn.gitbook.com/assets%2F-Me2HTYUybY4ojrYvI-8%2Fsync%2Fb016864ae8dd85f027f4bc983eb8871baa4e68a7.jpg?alt=media" style="zoom:50%;" />

<p><strong>我们定义的</strong> <strong><code>backtrack</code></strong> <strong>函数其实就像一个指针，在这棵树上游走，同时要正确维护每个节点的属性，每当走到树的底层，其「路径」就是一个全排列</strong>。</p>
<p>核心框架：</p>
<pre><code class="java">for 选择 in 选择列表:
    # 做选择
    将该选择从选择列表移除
    路径.add(选择)
    backtrack(路径, 选择列表)
    # 撤销选择
    路径.remove(选择)
    将该选择再加入选择列表
</code></pre>
<h2 id="二、N皇后问题"><a href="#二、N皇后问题" class="headerlink" title="二、N皇后问题"></a>二、N皇后问题</h2>]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>3.广度优先（BFS）</title>
    <url>/2021/07/14/3.%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%EF%BC%88BFS%EF%BC%89/</url>
    <content><![CDATA[<h1 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h1><p><strong>1. 关键要点：在BFS中，关键点则是状态的选取和标记</strong></p>
<ul>
<li><img src="https://pic4.zhimg.com/80/v2-813b44a06012c6ae599a62aaa422c96b_720w.png" style="zoom:150%;" /></li>
</ul>
<p><strong>2. 数据结构上的运用</strong></p>
<ul>
<li><p>DFS用递归的形式，用到了栈结构，先进后出。</p>
</li>
<li><p>BFS选取状态用队列的形式，先进先出。</p>
</li>
</ul>
<img src="https://pic.leetcode-cn.com/fdcd3bd27f4008948084f6ec86b58535e71f66862bd89a34bd6fe4cc42d68e89.gif" style="zoom:50%;" />

<p><strong>形象点说，DFS 是线，BFS 是面；DFS 是单打独斗，BFS 是集体行动。这个应该比较容易理解吧。</strong></p>
<h1 id="1-111-二叉树的最小深度"><a href="#1-111-二叉树的最小深度" class="headerlink" title="1. 111. 二叉树的最小深度"></a>1. <a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/">111. 二叉树的最小深度</a></h1><ul>
<li>根据BFS齐头并进的特点，当第一次到达叶子节点的时候，此时就是最小深度</li>
<li>需定义：</li>
</ul>
<ol>
<li>Python中队列这样定义：</li>
</ol>
<pre><code class="python">from collections import deque

queue = deque() # []
queue.append(1) #[1]
queue.append(2) #[1,2]
queue.popleft() #[2]
# 记住队列的特点，「先入先出」
</code></pre>
<ol start="2">
<li>结束条件，当前到达叶子节点，该节点左右都不为零</li>
<li>当该节点不是叶子节点的时候，就将左子节点和右子节点加入到队列中</li>
</ol>
<h1 id="2-752-打开转盘锁"><a href="#2-752-打开转盘锁" class="headerlink" title="2. 752. 打开转盘锁"></a>2. <a href="https://leetcode-cn.com/problems/open-the-lock/">752. 打开转盘锁</a></h1><p><strong>要点：</strong></p>
<ol>
<li>列表deadends包含了一组死亡数字，一旦拨轮的数字和列表中的任何一个元素相同，就不行；</li>
<li>字符串target代表可以解锁的数字，需要给出最小的旋转次数</li>
</ol>
]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot雷神</title>
    <url>/2021/07/17/SpringBoot/</url>
    <content><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><p>Spring Boot 2 学习笔记（上）：<a href="https://blog.csdn.net/u011863024/article/details/113667634">https://blog.csdn.net/u011863024/article/details/113667634</a></p>
<p>Spring Boot 2 学习笔记（下）：<a href="https://blog.csdn.net/u011863024/article/details/113667946">https://blog.csdn.net/u011863024/article/details/113667946</a></p>
<p>文档链接：<a href="https://www.yuque.com/atguigu/springboot">https://www.yuque.com/atguigu/springboot</a></p>
<p><strong>源码资源</strong>：</p>
<p>链接：<a href="https://pan.baidu.com/s/1NCmg1FpNoyfla8jKc-V5CA">https://pan.baidu.com/s/1NCmg1FpNoyfla8jKc-V5CA</a><br>提取码：opb6<br>p43的html网页资源</p>
<h2 id="1-入门：HelloWorld"><a href="#1-入门：HelloWorld" class="headerlink" title="1. 入门：HelloWorld"></a>1. 入门：HelloWorld</h2><h3 id="1-1开始"><a href="#1-1开始" class="headerlink" title="1.1开始"></a>1.1开始</h3><ul>
<li><strong>构建</strong>maven工程，在pom文件众加入依赖</li>
<li><strong>创建</strong>MainApplication主启动程序</li>
<li><strong>构建</strong>controller层文件夹，在里面写对应的业务</li>
</ul>
<h3 id="1-2-简化配置"><a href="#1-2-简化配置" class="headerlink" title="1.2 简化配置"></a>1.2 简化配置</h3><p>为了简化配置，SpringBoot将其抽离在Resources目录下的 application.properties 文件，在其中可以更改端口号，以及其他的一些配置，在官方文档中可以查询到具体的配置。</p>
<h3 id="1-3简化部署"><a href="#1-3简化部署" class="headerlink" title="1.3简化部署"></a>1.3简化部署</h3><pre><code class="xml">&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>
<p>引入插件，然后把项目打成jar包即可，这里要理解MAVEN的生命周期。</p>
<ul>
<li>取消掉cmd的快速编辑模式</li>
</ul>
<h2 id="2-了解SpringBoot的特点"><a href="#2-了解SpringBoot的特点" class="headerlink" title="2. 了解SpringBoot的特点"></a>2. 了解SpringBoot的特点</h2><h3 id="2-1-修改依赖版本"><a href="#2-1-修改依赖版本" class="headerlink" title="2.1 修改依赖版本"></a>2.1 修改依赖版本</h3><ol>
<li>查看spring-boot-dependencies 里面规定当前依赖的版本用的key</li>
<li>在当前项目里重写配置即可</li>
</ol>
<pre><code class="xml">&lt;properties&gt;
    &lt;mysql.version&gt;5.1.43&lt;/mysql.version&gt;
&lt;/properties&gt;
</code></pre>
<h3 id="2-2-自动配置"><a href="#2-2-自动配置" class="headerlink" title="2.2 自动配置"></a>2.2 自动配置</h3><ul>
<li>主程序所在的包，及其这个包的子包都会被访问到，例如controller  ，因此无需配置以前的包扫描。</li>
<li>如果想改变扫描路径， @SpringBootApplication(scanBasePackages=”com.atguigu”)， </li>
</ul>
<pre><code class="java"> @SpringBootApplication(scanBasePackages=&quot;com.atguigu&quot;)
 等同于
     @SpringBootConfiguration
     @EnableBootConfigutation
     @ComponentScan(&quot;com.atguigu.boot&quot;)
</code></pre>
<h3 id="2-3容器功能"><a href="#2-3容器功能" class="headerlink" title="2.3容器功能"></a>2.3容器功能</h3><ol>
<li>Configuration </li>
</ol>
<ul>
<li><p>Full 模式与 Lite 模式</p>
<p>最佳实战：</p>
<ul>
<li><p>配置 类组件之间无依赖关系用Lite 模式加速容器启动过程，减少判断，<strong>也就是说不需要创建新组建时用Lite</strong></p>
</li>
<li><p>配置类组件之间有依赖关系，方法会被调用得到之前单例组件，用Full模式，<strong>保证取得的组件为ioc中的同一组件</strong></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
</search>
